// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  whopUserId   String @unique @map("whop_user_id")
  email        String @unique
  name         String?
  username     String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  shopifyStores       ShopifyStore[]
  createdContests     Contest[] @relation("ContestCreator")
  contestParticipants ContestParticipant[]

  @@map("users")
}

model ShopifyStore {
  id          String  @id @default(cuid())
  userId      String  @map("user_id")
  shopDomain  String  @map("shop_domain")
  accessToken String  @map("access_token") // Encrypted
  isActive    Boolean @default(true) @map("is_active")
  lastSyncAt  DateTime? @map("last_sync_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  contestParticipants ContestParticipant[]
  orderSnapshots      OrderSnapshot[]

  @@unique([userId, shopDomain])
  @@map("shopify_stores")
}

model Contest {
  id            String        @id @default(cuid())
  creatorId     String        @map("creator_id")
  name          String
  description   String?
  slug          String        @unique
  metric        String        // "TOTAL_SALES" or "ORDER_COUNT"
  startAt       DateTime      @map("start_at")
  endAt         DateTime      @map("end_at")
  entryFeeCents Int           @default(0) @map("entry_fee_cents") // Stored in cents
  
  // Prize Pool Configuration
  prizePoolCents Int          @default(0) @map("prize_pool_cents") // Creator-funded prize pool in cents
  prizePoolType  String       @default("ENTRY_FEES") @map("prize_pool_type") // "ENTRY_FEES", "CREATOR_FUNDED", "HYBRID"
  firstPlacePercent Int       @default(60) @map("first_place_percent") // Percentage for 1st place
  secondPlacePercent Int      @default(30) @map("second_place_percent") // Percentage for 2nd place  
  thirdPlacePercent Int       @default(10) @map("third_place_percent") // Percentage for 3rd place
  
  whopPlanId    String?       @map("whop_plan_id")
  status        String        @default("DRAFT") // "DRAFT", "ACTIVE", "CLOSED", "CANCELLED"
  isPublic      Boolean       @default(true) @map("is_public")
  maxParticipants Int?        @map("max_participants")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  creator      User @relation("ContestCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants ContestParticipant[]
  orderSnapshots OrderSnapshot[]

  @@map("contests")
}

model ContestParticipant {
  contestId   String @map("contest_id")
  userId      String @map("user_id")
  storeId     String @map("store_id")
  isPaid      Boolean @default(false) @map("is_paid")
  totalSales  Int     @default(0) @map("total_sales") // In cents
  orderCount  Int     @default(0) @map("order_count")
  joinedAt    DateTime @default(now()) @map("joined_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  store   ShopifyStore @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([contestId, userId])
  @@map("contest_participants")
}

model OrderSnapshot {
  id          String   @id @default(cuid())
  storeId     String   @map("store_id")
  contestId   String   @map("contest_id")
  orderId     String   @map("order_id") // Shopify order ID
  totalPrice  Int      @map("total_price") // In cents
  currency    String   @default("USD")
  orderNumber String?  @map("order_number")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  store   ShopifyStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([storeId, contestId, orderId])
  @@index([contestId, createdAt])
  @@map("order_snapshots")
}

// Additional models for future features

model WebhookEvent {
  id        String   @id @default(cuid())
  source    String   // "shopify" or "whop"
  eventType String   @map("event_type")
  payload   String   // JSON payload
  processed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([source, processed])
  @@map("webhook_events")
}

model ContestPayout {
  id        String   @id @default(cuid())
  contestId String   @map("contest_id")
  userId    String   @map("user_id")
  amount    Int      // In cents
  rank      Int
  status    String   @default("pending") // pending, completed, failed
  createdAt DateTime @default(now()) @map("created_at")
  paidAt    DateTime? @map("paid_at")

  @@index([contestId, rank])
  @@map("contest_payouts")
} 